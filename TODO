Interface:
  * @--config=<config> -c: use an alternative configuration file
  * @--eval=<command> -e: interpret argument as framework command
  * @--interactive -i: force interactive mode even if -x is given
  * @--load=<session> -l: load the given session file
  * @--version -v: print version information
  * @--help -h: print help about the available commands

Core:
  * @cmdlib.py check if the cmd['args|line|name|argc'] can be removed for argv
  * @settings.py must also search for the ~/.config user root directory
  * @Session Files must keep the readline commands history
  * @Session Files must keep the last command output

Commands:
  * @lastcmd must correctly support regexp and -i on grep/hilight modes
  * Write complete help docstrings for the @Remote Shell commands
  * @alias core commant must be created
  * @doc core command must be created, to handle ./doc/ reading from interface

Plugins:
  * Privilegiate the @self.argv plugin variable, others are deprecated

Documentation:
  * Move current ./doc files to the root dir
  * The new ./doc dir must contain complete markdown documentation
  * Write a nice README which summarizes the framework's goal and features
  * Simplify the manpage to summarize only commands and how to get started
  * When all this done, the 'rtfm' core command can be removed

HTTP Manager:
  * Write a stealth module which use other target on each command (with 404)
